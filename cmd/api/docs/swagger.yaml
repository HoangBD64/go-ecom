definitions:
  req.LoginStruct:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 5
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - password
    type: object
  req.OTPLoginStruct:
    properties:
      email:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 16
        minLength: 3
        type: string
    type: object
  req.OTPVerifyStruct:
    properties:
      id:
        type: integer
      otp:
        maxLength: 8
        minLength: 4
        type: string
    required:
    - id
    - otp
    type: object
  req.ReqAddress:
    properties:
      area:
        type: string
      city:
        type: string
      country_id:
        type: integer
      house:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      land_mark:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        maxLength: 10
        minLength: 10
        type: string
      pincode:
        type: integer
    required:
    - country_id
    - house
    - land_mark
    - name
    - phone_number
    - pincode
    type: object
  req.ReqCart:
    properties:
      product_item_id:
        type: integer
      user_id:
        type: integer
    required:
    - product_item_id
    type: object
  req.ReqCartCount:
    properties:
      count:
        minimum: 1
        type: integer
      increment:
        type: boolean
      product_item_id:
        type: integer
      user_id:
        type: integer
    required:
    - increment
    - product_item_id
    type: object
  req.ReqEditAddress:
    properties:
      area:
        type: string
      city:
        type: string
      country_id:
        type: integer
      house:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      land_mark:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        maxLength: 10
        minLength: 10
        type: string
      pincode:
        type: integer
    required:
    - country_id
    - house
    - id
    - land_mark
    - name
    - phone_number
    - pincode
    type: object
  req.ReqUpdateOrder:
    properties:
      order_status_id:
        type: integer
      shop_order_id:
        type: integer
    required:
    - shop_order_id
    type: object
  req.ReqUser:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    type: object
  res.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: after user login user will seen this page with user informations
      operationId: Home
      responses:
        "200":
          description: Welcome Home
        "400":
          description: Faild to load user home page
      security:
      - ApiKeyAuth: []
      summary: api for showing home page of user
      tags:
      - Home
  /carts:
    delete:
      description: user can remove a signle productItem full quantity from cart
      operationId: RemoveFromCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.ReqCart'
      responses:
        "200":
          description: Successfully productItem removed from cart
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: can't remove product item from cart
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for remove a product from cart
      tags:
      - Carts
    get:
      description: user can see all productItem that stored in cart
      operationId: UserCart
      responses:
        "200":
          description: successfully got user cart items
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to get cart items
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for get all cart item of user
      tags:
      - Carts
    post:
      description: user can add a stock in product to user cart
      operationId: AddToCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.ReqCart'
      responses:
        "200":
          description: Successfully productItem added to cart
        "400":
          description: can't add the product item into cart
      security:
      - ApiKeyAuth: []
      summary: api for add productItem to user cart
      tags:
      - Carts
    put:
      description: user can inrement or drement count of a productItem in cart (min=1)
      operationId: UpdateCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.ReqCartCount'
      responses:
        "200":
          description: Successfully productItem count change on cart
        "400":
          description: invalid input
        "500":
          description: can't update the count of product item on cart
      security:
      - ApiKeyAuth: []
      summary: api for updte productItem count
      tags:
      - Carts
  /carts/checkout:
    get:
      description: user can checkout user cart items
      operationId: CheckOutCart
      responses:
        "200":
          description: successfully got checkout data
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: cart is empty so user can't call this api
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to get checkout items
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for cart checkout
      tags:
      - Carts
  /carts/place-order/:address_id:
    post:
      description: user can place after checkout
      operationId: PlaceOrderByCart
      responses:
        "200":
          description: successfully placed your order for COD
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: faild to place to order
          schema:
            $ref: '#/definitions/res.Response'
      summary: api for place order of all items in user cart
      tags:
      - Carts
  /login:
    get:
      description: Enter this fields on login page post
      operationId: LoginGet
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: to get the json format for login
      tags:
      - Login
    post:
      description: Enter user_name/phone/email with password
      operationId: LoginPost
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/req.LoginStruct'
      responses:
        "200":
          description: successfully logged in
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: faild to login
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to generat JWT
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user login
      tags:
      - Login
  /login/otp-send:
    post:
      description: user can enter email/user_name/phone will send an otp to user phone
      operationId: LoginOtpSend
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/req.OTPLoginStruct'
      responses:
        "200":
          description: Successfully Otp Send to registered number
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Enter input properly
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Faild to send otp
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user login with otp
      tags:
      - Login
  /login/otp-verify:
    post:
      description: enter your otp that send to your registered number
      operationId: LoginOtpVerify
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/req.OTPVerifyStruct'
      responses:
        "200":
          description: successfully logged in uing otp
        "400":
          description: invalid input otp
        "500":
          description: Faild to generate JWT
      security:
      - ApiKeyAuth: []
      summary: varify user login otp
      tags:
      - Login
  /logout:
    post:
      description: user can logout
      operationId: Logout
      responses:
        "200":
          description: successfully logged out
      security:
      - ApiKeyAuth: []
      summary: api for user to lgout
      tags:
      - Logout
  /orders:
    get:
      description: user can see all user order history
      operationId: GetOrdersOfUser
      responses:
        "200":
          description: successfully got shop order list of user
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to get user shop order list
          schema:
            $ref: '#/definitions/res.Response'
      summary: api for showing user order list
      tags:
      - Orders
  /orders/:
    put:
      description: admin can change user order status
      operationId: GetAllShopOrders
      responses:
        "200":
          description: Successfully order cancelled
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/res.Response'
      summary: api for admin to change the status of order
      tags:
      - Orders
  /orders/items:
    get:
      description: user can place after checkout
      operationId: GetOrderItemsForUser
      responses:
        "200":
          description: successfully got order items
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to get order list of user
          schema:
            $ref: '#/definitions/res.Response'
      summary: api for show order items of a specific order
      tags:
      - Orders
  /profile:
    put:
      description: user can edit user details
      operationId: EditAccount
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.ReqUser'
      responses:
        "200":
          description: successfully edited user details
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for edit user details
      tags:
      - Profile
  /profile/:
    get:
      description: user can see user details
      operationId: Account
      responses:
        "200":
          description: Successfully user account details found
        "500":
          description: faild to show user details
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for showing user details
      tags:
      - Profile
  /profile/address:
    get:
      description: user can show all adderss
      operationId: GetAddresses
      responses:
        "200":
          description: successfully got user addresses
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: faild to show user addresses
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for get all address of user
      tags:
      - Address
    post:
      description: get a new address from user to store the the database
      operationId: AddAddress
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/req.ReqAddress'
      responses:
        "200":
          description: Successfully address added
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: inavlid input
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for adding a new address for user
      tags:
      - Address
    put:
      description: user can change existing address
      operationId: EditAddress
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.ReqEditAddress'
      responses:
        "200":
          description: successfully addresses updated
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: can't update the address
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for edit user address
      tags:
      - Address
  /signup:
    get:
      description: user can see what are the fields to enter to create a new account
      operationId: SignUpGet
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to signup page
      tags:
      - Signup
    post:
      description: user can send user details and validate and create new account
      operationId: SignUpPost
      responses:
        "200":
          description: Successfully account created
        "400":
          description: Faild to create account
      security:
      - ApiKeyAuth: []
      summary: api for user to post the user details
      tags:
      - Signup
  /wishlist:
    delete:
      operationId: RemoveFromWishList
      responses:
        "200":
          description: successfully removed product item from wishlist
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api to remove a productItem from wish list
      tags:
      - Wishlist
    get:
      operationId: GetWishListI
      responses:
        "200":
          description: Wish list is empty
        "400":
          description: faild to get user wish list items
      security:
      - ApiKeyAuth: []
      summary: api get all wish list items of user
      tags:
      - Wishlist
    post:
      operationId: AddToWishList
      parameters:
      - description: product_id
        in: body
        name: product_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully added product item to wishlist
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - ApiKeyAuth: []
      summary: api to add a productItem to wish list
      tags:
      - Wishlist
swagger: "2.0"
