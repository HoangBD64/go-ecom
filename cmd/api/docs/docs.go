// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cart": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can see all productItem that stored in cart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "api for get all cart item of user",
                "operationId": "UserCart",
                "responses": {
                    "200": {
                        "description": "there is no productItems in the cart",
                        "schema": {
                            "$ref": "#/definitions/res.ResponseCart"
                        }
                    },
                    "500": {
                        "description": "Faild to get user cart"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can inrement or drement count of a productItem in cart (min=1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "api for updte productItem count",
                "operationId": "UpdateCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.ReqCartCount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully productItem count change on cart"
                    },
                    "400": {
                        "description": "can't change count of product item on cart"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can add a stock in product to user cart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "api for add productItem to user cart",
                "operationId": "AddToCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.ReqCart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully productItem added to cart"
                    },
                    "400": {
                        "description": "can't add the product item into cart"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can remove a signle productItem full quantity from cart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "api for remove a product from cart",
                "operationId": "RemoveFromCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.ReqCart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully productItem removed from cart"
                    },
                    "400": {
                        "description": "can't remove product item into cart"
                    }
                }
            }
        },
        "/login": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Enter this fields on login page post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "to get the json format for login",
                "operationId": "LoginGet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/req.LoginStruct"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Enter user_name/phone/email with password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "api for user login",
                "operationId": "LoginPost",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.LoginStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Loged In"
                    },
                    "400": {
                        "description": "faild to login"
                    },
                    "500": {
                        "description": "faild to generat JWT"
                    }
                }
            }
        },
        "/login-otp-send": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can enter email/user_name/phone will send an otp to user phone",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "api for user login with otp",
                "operationId": "LoginOtpSend",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.OTPLoginStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Otp Send to registered number"
                    },
                    "400": {
                        "description": "Enter input properly"
                    },
                    "500": {
                        "description": "Faild to send otp"
                    }
                }
            }
        },
        "/login-otp-verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "enter your otp that send to your registered number",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "varify user login otp",
                "operationId": "LoginOtpVerify",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.OTPVerifyStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Logged In"
                    },
                    "400": {
                        "description": "Invalid Otp"
                    },
                    "500": {
                        "description": "Faild to generate JWT"
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can logout",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logout"
                ],
                "summary": "api for user to lgout",
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "Successfully logout"
                    }
                }
            }
        },
        "/profile/address": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can show all adderss",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "api for get all address of user",
                "operationId": "GetAddresses",
                "responses": {
                    "200": {
                        "description": "Successfully address got"
                    },
                    "500": {
                        "description": "Faild to get address of user"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can change existing address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "api for edit user address",
                "operationId": "EditAddress",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.ReqEditAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully addresses updated"
                    },
                    "400": {
                        "description": "can't update the address"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get a new address from user to store the the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "api for adding a new address for user",
                "operationId": "AddAddress",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.ReqAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully address added"
                    },
                    "400": {
                        "description": "can't add the user addres"
                    }
                }
            }
        },
        "/signup": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can see what are the fields to enter to create a new account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "api for user to signup page",
                "operationId": "SignUpGet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can send user details and validate and create new account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "api for user to post the user details",
                "operationId": "SignUpPost",
                "responses": {
                    "200": {
                        "description": "Successfully account created"
                    },
                    "400": {
                        "description": "Faild to create account"
                    }
                }
            }
        },
        "/wishlist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wishlist"
                ],
                "summary": "api get all wish list items of user",
                "operationId": "GetWishListI",
                "responses": {
                    "200": {
                        "description": "Wish list is empty"
                    },
                    "400": {
                        "description": "faild to get user wish list items"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wishlist"
                ],
                "summary": "api to remove a productItem from wish list",
                "operationId": "RemoveFromWishList",
                "responses": {
                    "200": {
                        "description": "Successfully product_item remvoed from wishlist"
                    },
                    "400": {
                        "description": "Faild to remove product_item from wishlist"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.User": {
            "type": "object",
            "required": [
                "age",
                "email",
                "first_name",
                "last_name",
                "password",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "block_status": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "req.LoginStruct": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "req.OTPLoginStruct": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 3
                }
            }
        },
        "req.OTPVerifyStruct": {
            "type": "object",
            "required": [
                "id",
                "otp"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "otp": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 4
                }
            }
        },
        "req.ReqAddress": {
            "type": "object",
            "required": [
                "country_id",
                "house",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country_id": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "req.ReqCart": {
            "type": "object",
            "required": [
                "product_item_id"
            ],
            "properties": {
                "product_item_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "req.ReqCartCount": {
            "type": "object",
            "required": [
                "increment",
                "product_item_id"
            ],
            "properties": {
                "increment": {
                    "type": "boolean"
                },
                "product_item_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "req.ReqEditAddress": {
            "type": "object",
            "required": [
                "country_id",
                "house",
                "id",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country_id": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "res.ResponseCart": {
            "type": "object",
            "properties": {
                "cartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/res.ResponseCartItem"
                    }
                },
                "total_price": {
                    "type": "integer"
                }
            }
        },
        "res.ResponseCartItem": {
            "type": "object",
            "properties": {
                "out_of_stock": {
                    "type": "boolean"
                },
                "price": {
                    "type": "integer"
                },
                "product_item_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "qty": {
                    "type": "integer"
                },
                "sub_total": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
